{"version":3,"sources":["utils/API.js","components/Table.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","TableHeader","class","aria-hidden","TableBody","props","rows","resultData","map","row","index","key","alt","name","first","className","src","picture","thumbnail","last","phone","email","dob","date","Table","App","state","results","filteredResults","searchAPI","API","then","res","setState","data","catch","err","console","log","setName","e","tempResults","filter","emp","includes","sortResults","sortedResults","sort","a","b","this","htmlFor","type","id","placeholder","value","onChange","target","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"uQAIe,EACJ,WACH,OAAOA,IAAMC,IAJL,kDCCVC,EAAc,WAChB,OACI,+BACI,4BACI,qCACA,mCAAQ,uBAAGC,MAAM,0BAA0BC,cAAY,UACvD,qCACA,qCACA,sCAMVC,EAAY,SAACC,GACf,IAAMC,EAAOD,EAAME,WACdC,KAAI,SAACC,EAAKC,GACP,OACI,wBAAIC,IAAKD,GACL,4BAAI,yBAAKE,IAAKH,EAAII,KAAKC,MAAOC,UAAU,YAAYC,IAAKP,EAAIQ,QAAQC,aACrE,4BAAKT,EAAII,KAAKC,MAAd,IAAsBL,EAAII,KAAKM,MAC/B,4BAAKV,EAAIW,OACT,4BAAKX,EAAIY,OACT,4BAAKZ,EAAIa,IAAIC,UAK7B,OAAO,+BAAQjB,IAeJkB,EAXD,SAACnB,GAAW,IACdE,EAAeF,EAAfE,WAER,OACI,2BAAOQ,UAAU,uBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAWR,WAAYA,MCuBpBkB,E,4MA3DXC,MAAQ,CACJC,QAAS,GACTC,gBAAiB,GACjBf,KAAM,I,EAOVgB,UAAY,WACRC,IAEKC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAL,2BAAmB,EAAKP,OAAxB,IAA+BC,QAASK,EAAIE,KAAKP,QAASC,gBAAiBI,EAAIE,KAAKP,cAChGQ,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAGlCG,QAAU,SAACC,GACP,IAAIC,EAAc,EAAKf,MAAMC,QAAQe,QAAO,SAAAC,GAAS,OAAOA,EAAI9B,KAAKC,MAAM8B,SAASJ,IAAMG,EAAI9B,KAAKM,KAAKyB,SAASJ,MACjH,EAAKP,SAAL,2BAAmB,EAAKP,OAAxB,IAA+Bb,KAAM2B,EAAGZ,gBAAiBa,M,EAK7DI,YAAc,WACV,IACIC,EADU,EAAKpB,MAAME,gBACGmB,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnC,KAAKC,MAAQmC,EAAEpC,KAAKC,MAAS,GAAK,KAChF,EAAKmB,SAAL,2BAAmB,EAAKP,OAAxB,IAA+BE,gBAAiBkB,M,kEApBhDI,KAAKrB,c,+BAuBC,IAAD,OACGD,EAAoBsB,KAAKxB,MAAzBE,gBAER,OACI,yBAAKb,UAAU,aACX,yBAAKb,MAAM,gCACP,8BACI,2BAAOiD,QAAQ,QAAf,WACA,mCACA,2BACIC,KAAK,OACLvC,KAAK,OACLwC,GAAG,OACHC,YAAY,aACZC,MAAOL,KAAKxB,MAAMb,KAClB2C,SAAU,SAAAhB,GAAC,OAAI,EAAKD,QAAQC,EAAEiB,OAAOF,WAEjD,yBAAKxC,UAAU,eACX,4BAAQqC,KAAK,SAASrC,UAAU,oBAC5B2C,QAAS,SAAAlB,GAAC,OAAI,EAAKK,gBADvB,yBAKJ,kBAAC,EAAD,CAAOtC,WAAYqB,S,GAtDjB+B,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAuC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.4f79c744.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\nexport default {\n    fetch: function () {\n        return axios.get(BASEURL);\n    }\n};\n","\nimport React from \"react\";\n\nconst TableHeader = () => {\n    return (\n        <thead>\n            <tr>\n                <th>Image</th>\n                <th>Name<i class=\"fa fa-angle-double-down\" aria-hidden=\"true\"></i></th>\n                <th>Phone</th>\n                <th>Email</th>\n                <th>DOB</th>\n            </tr>\n        </thead>\n    )\n}\n\nconst TableBody = (props) => {\n    const rows = props.resultData\n        .map((row, index) => {\n            return (\n                <tr key={index}>\n                    <td><img alt={row.name.first} className=\"img-fluid\" src={row.picture.thumbnail} /></td>\n                    <td>{row.name.first} {row.name.last}</td>\n                    <td>{row.phone}</td>\n                    <td>{row.email}</td>\n                    <td>{row.dob.date}</td>\n                </tr>\n            )\n        })\n\n    return <tbody>{rows}</tbody>\n}\n\n\nconst Table = (props) => {\n    const { resultData } = props\n\n    return (\n        <table className=\"table table-striped\">\n            <TableHeader />\n            <TableBody resultData={resultData} />\n        </table>\n    )\n}\n\nexport default Table","import React, { Component } from 'react'\nimport API from \"./utils/API\";\nimport Table from \"./components/Table\"\n\nclass App extends Component {\n    state = {\n        results: [],\n        filteredResults: [],\n        name: \"\",\n    };\n\n    componentDidMount() {\n        this.searchAPI();\n    }\n\n    searchAPI = () => {\n        API.fetch()\n            // .then(res => console.log(res))\n            .then(res => this.setState({ ...this.state, results: res.data.results, filteredResults: res.data.results }))\n            .catch(err => console.log(err));\n    };\n\n    setName = (e) => {\n        let tempResults = this.state.results.filter(emp => { return emp.name.first.includes(e) || emp.name.last.includes(e) })\n        this.setState({ ...this.state, name: e, filteredResults: tempResults });\n        // console.log(this.state.filteredResults);\n\n    }\n\n    sortResults = () => {\n        let results = this.state.filteredResults;\n        let sortedResults = results.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1);\n        this.setState({ ...this.state, filteredResults: sortedResults });\n    }\n\n    render() {\n        const { filteredResults } = this.state\n\n        return (\n            <div className=\"container\">\n                <nav class=\"navbar navbar-light bg-light\">\n                    <form>\n                        <label htmlFor=\"name\">Search:</label>\n                        <span> </span>\n                        <input\n                            type=\"text\"\n                            name=\"name\"\n                            id=\"name\"\n                            placeholder=\"Enter Name\"\n                            value={this.state.name}\n                            onChange={e => this.setName(e.target.value)} />\n                    </form>\n                <div className=\"float-right\">\n                    <button type=\"button\" className=\"btn btn-secondary\"\n                        onClick={e => this.sortResults()}\n                    >Sort Alphabetically</button>\n                </div>\n                </nav>\n                <Table resultData={filteredResults} />\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}